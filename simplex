/* program for simplex method with standard format
a= coefficient matrix
c= cost vector
b= rhs vector
soln= solution vector
ib= index set of basic variables
cb= cost vector of basic variables
binv= inverse of basic matrix
binvn= inverse of new basis matrix
ele= pre-multiplied elementary matrix for binv to get binvn
binva= binv*a ;simplex tables elements
zcj= zj-cj vector
evn= entering variable number
pp= position of pivoting element
amin= minimum value from the set of values
ratio= minimum ratio value
optval= optimum value of the objective function */

#include <iostream>
#include <cmath>
using namespace std;

int main() {
    float a[10][20], c[20], b[10], soln[20], cb[10], binv[10][10], binvn[10][10];
    float ele[10][10], binva[10][20], zcj[20], sum, amin, ratio, temp, optval;
    int ib[10], i, j, k, m, n, ibvn, evn, pp;

    cout << "give the number of constraints\n";
    cin >> m;
    cout << "give the number of variables\n";
    cin >> n;
    cout << "give the coefficients matrix A row wise\n";
    for (i = 0; i < m; i++)
        for (j = 0; j < n; j++)
            cin >> a[i][j];

    cout << "give the rhs vector\n";
    for (i = 0; i < m; i++)
        cin >> b[i];

    cout << "give the cost vector\n";
    for (i = 0; i < n; i++)
        cin >> c[i];

    cout << "give the index set of basic variables\n";
    for (i = 0; i < m; i++)
        cin >> ib[i];

    /* taking the initial basis matrix as identity matrix */
    for (i = 0; i < m; i++)
        for (j = 0; j < m; j++)
            binv[i][j] = (i == j) ? 1 : 0;

    for (i = 0; i < m; i++)
        cb[i] = c[ib[i]];

    /* calculation of simplex tables elements */
table:
    for (i = 0; i < m; i++) {
        for (j = 0; j < n; j++) {
            sum = 0;
            for (k = 0; k < m; k++)
                sum += binv[i][k] * a[k][j];
            if (fabs(sum) < 1e-5) sum = 0;
            binva[i][j] = sum;
        }
    }

    for (i = 0; i < m; i++) {
        sum = 0;
        for (k = 0; k < m; k++)
            sum += binv[i][k] * b[k];
        soln[i] = sum;
    }

    /* calculation of zj - cj vector */
    for (j = 0; j < n; j++) {
        sum = 0;
        for (i = 0; i < m; i++)
            sum += cb[i] * binva[i][j];
        zcj[j] = sum - c[j];
        if (fabs(zcj[j]) < 1e-5)
            zcj[j] = 0;
    }

    /* checking the optimality conditions and entering variable */
    amin = 10000.0;
    for (j = 0; j < n; j++) {
        if (zcj[j] < amin) {
            amin = zcj[j];
            evn = j;
        }
    }

    if (amin >= 0.0)
        goto optsoln;

    /* calculation of minimum ratio and pivoting position */
    pp = -1;
    ratio = 10000.0;
    for (i = 0; i < m; i++) {
        if (binva[i][evn] > 0) {
            temp = soln[i] / binva[i][evn];
            if (temp < ratio) {
                ratio = temp;
                pp = i;
            }
        }
    }

    if (pp == -1) {
        cout << "\n\n the solution is unbounded\n";
        goto exit;
    }

    /* generation of premultiplied elementary matrix to calculate new b inverse */
    for (i = 0; i < m; i++) {
        for (j = 0; j < m; j++) {
            if (i == j) ele[i][j] = 1;
            else ele[i][j] = 0;
        }
    }

    for (i = 0; i < m; i++) {
        if (i == pp)
            ele[i][pp] = 1.0 / binva[pp][evn];
        else
            ele[i][pp] = -binva[i][evn] / binva[pp][evn];
    }

    /* calculation of new basis inverse */
    for (i = 0; i < m; i++) {
        for (j = 0; j < m; j++) {
            sum = 0;
            for (k = 0; k < m; k++)
                sum += ele[i][k] * binv[k][j];
            binvn[i][j] = sum;
        }
    }

    /* storing new basis inverse into b inverse */
    for (i = 0; i < m; i++)
        for (j = 0; j < m; j++)
            binv[i][j] = binvn[i][j];

    ib[pp] = evn;
    cb[pp] = c[ib[pp]];
    goto table;

    /* optimal table results */
optsoln:
    cout << "\n\n OPTIMAL TABLE RESULTS :\n";
    cout << "\n the basic variables numbers are\n";
    for (i = 0; i < m; i++)
        cout << ib[i] + 1 << " ";

    cout << "\n the optimal solution is given by\n";
    for (i = 0; i < m; i++)
        cout << soln[i] << " ";

    sum = 0;
    for (i = 0; i < m; i++)
        sum += cb[i] * soln[i];

    optval = sum;
    cout << "\n\n optimum value of the objective function is " << optval << "\n";

exit:
    return 0;
}
