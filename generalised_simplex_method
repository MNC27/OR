/* Program for simplex method with standard format
a    = coefficient matrix
c    = cost vector
b    = RHS vector
soln = solution vector
ib   = index set of basic variables
cb   = cost vector of basic variables
binv = inverse of basic matrix
binvn= inverse of new basis matrix
ele  = pre-multiplied elementary matrix for binv to get binvn
binva= binv * a ; simplex table elements
zcj  = zj - cj vector
evn  = entering variable number
pp   = position of pivoting element
amin = minimum value from the set of values (for entering variable selection)
ratio= minimum ratio value (for leaving variable selection)
optval = optimum value of the objective function
ot   = problem type (1 for Maximisation, 2 for Minimisation)
ct   = array storing constraint types (1 for <=, 2 for >=, 3 for =)
nart = number of artificial variables
iart = array storing indices of artificial variables
*/

#include <iostream>
#include <cmath>
using namespace std;

int main() {
    float a[10][20], c[20], b[10], soln[20], cb[10], binv[10][10], binvn[10][10];
    float ele[10][10], binva[10][20], zcj[20], sum, amin, ratio, temp, optval;
    int ib[10], i, j, k, m, n, evn, pp;
    int ot;
    int ct[10];
    int nart = 0;
    int iart[10];

    cout << "Number of constraints: ";
    cin >> m;
    cout << "Number of variables: ";
    cin >> n;

    cout << "Enter coefficient matrix A row-wise:\n";
    for (i = 0; i < m; i++)
        for (j = 0; j < n; j++)
            cin >> a[i][j];

    cout << "Enter RHS vector b:\n";
    for (i = 0; i < m; i++)
        cin >> b[i];

    cout << "Enter cost vector c:\n";
    for (i = 0; i < n; i++)
        cin >> c[i];

    cout << "Enter problem type: 1 for Max, 2 for Min: ";
    cin >> ot;

    cout << "Enter constraint types (1 for <=, 2 for >=, 3 for =):\n";
    for (i = 0; i < m; i++)
        cin >> ct[i];

    int orig_n = n;
    // Adding slack/artificial variables
    for (i = 0; i < m; i++) {
        if (ct[i] == 1) {
            for (k = 0; k < m; k++)
                a[k][n] = (i == k ? 1 : 0);
            c[n] = 0;
            ib[i] = n;
            n++;
        }
        if (ct[i] == 2) {
            for (k = 0; k < m; k++)
                a[k][n] = (i == k ? -1 : 0);
            c[n] = 0;
            n++;
            for (k = 0; k < m; k++)
                a[k][n] = (i == k ? 1 : 0);
            c[n] = -1000000;
            ib[i] = n;
            iart[nart++] = n;
            n++;
        }
        if (ct[i] == 3) {
            for (k = 0; k < m; k++)
                a[k][n] = (i == k ? 1 : 0);
            c[n] = -1000000;
            ib[i] = n;
            iart[nart++] = n;
            n++;
        }
    }

    // Initialize basic inverse
    for (i = 0; i < m; i++)
        for (j = 0; j < m; j++)
            binv[i][j] = a[i][ib[j]];

    for (i = 0; i < m; i++)
        cb[i] = c[ib[i]];

table:
    // Compute binva and solution
    for (i = 0; i < m; i++) {
        for (j = 0; j < n; j++) {
            sum = 0;
            for (k = 0; k < m; k++)
                sum += binv[i][k] * a[k][j];
            binva[i][j] = (fabs(sum) < 1e-5 ? 0 : sum);
        }
    }

    for (i = 0; i < m; i++) {
        sum = 0;
        for (k = 0; k < m; k++)
            sum += binv[i][k] * b[k];
        soln[i] = sum;
    }

    // Compute zj - cj
    for (j = 0; j < n; j++) {
        sum = 0;
        for (i = 0; i < m; i++)
            sum += cb[i] * binva[i][j];
        zcj[j] = sum - c[j];
        if (fabs(zcj[j]) < 1e-5) zcj[j] = 0;
    }

    amin = 10000000.0;
    for (j = 0; j < n; j++) {
        if (zcj[j] < amin) {
            amin = zcj[j];
            evn = j;
        }
    }

    if (amin >= 0.0) goto optsoln;

    // Minimum ratio test
    pp = -1;
    ratio = 10000000.0;
    for (i = 0; i < m; i++) {
        if (binva[i][evn] > 0) {
            temp = soln[i] / binva[i][evn];
            if (temp < ratio) {
                ratio = temp;
                pp = i;
            }
        }
    }

    if (pp == -1) {
        cout << "\nSolution is unbounded\n";
        goto exit;
    }

    // Elementary matrix
    for (i = 0; i < m; i++)
        for (j = 0; j < m; j++)
            ele[i][j] = (i == j ? 1 : 0);

    for (i = 0; i < m; i++) {
        if (i == pp)
            ele[i][pp] = 1.0 / binva[pp][evn];
        else
            ele[i][pp] = -binva[i][evn] / binva[pp][evn];
    }

    // Update binv
    for (i = 0; i < m; i++)
        for (j = 0; j < m; j++) {
            sum = 0;
            for (k = 0; k < m; k++)
                sum += ele[i][k] * binv[k][j];
            binvn[i][j] = sum;
        }

    for (i = 0; i < m; i++)
        for (j = 0; j < m; j++)
            binv[i][j] = binvn[i][j];

    ib[pp] = evn;
    cb[pp] = c[ib[pp]];
    goto table;

optsoln:
    // Check infeasibility
    for (i = 0; i < m; i++)
        for (j = 0; j < nart; j++)
            if (ib[i] == iart[j] && soln[i] > 0) {
                cout << "LP is infeasible\n";
                goto exit;
            }

    cout << "\nOptimal solution:\nBasic variable indices:\n";
    for (i = 0; i < m; i++) cout << ib[i] + 1 << " ";
    cout << "\nSolution vector:\n";
    for (i = 0; i < m; i++) cout << soln[i] << " ";

    sum = 0;
    for (i = 0; i < m; i++) sum += cb[i] * soln[i];
    optval = (ot == 2 ? -sum : sum);
    cout << "\nOptimal value of objective function: " << optval << "\n";

exit:
    return 0;
}
